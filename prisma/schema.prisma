// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  userName         String           @unique
  password         String
  role             UserRole
  phoneNumber      String?
  paymentsProducts PaymentProduct[]
  paymentsOffers   PaymentOffer[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("users")
}

model Category {
  id        Int       @id @default(autoincrement())
  position  Int
  name      String    @unique
  imageUri  String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id                    Int                    @id @default(autoincrement())
  name                  String
  position              Int?
  price                 Float
  isPublish             Boolean                @default(true)
  // cookingMethod         CookingMethod[]
  categoryId            Int?
  category              Category?              @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  paymentsProduct       PaymentProduct[]
  Offers                Offer[]
  paymentProductDetails PaymentProductDetail[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@map("products")
}

model PaymentProduct {
  id                Int                    @id @default(autoincrement())
  dailyNumber       Int                    @default(0)
  products          Product[]
  detailsProducts   PaymentProductDetail[]
  totalePrice       Float
  isPayed           Boolean                @default(true)
  delevryPrice      Float?
  clientPhoneNumber String?
  delevryId         Int?
  delevry           User?                  @relation(fields: [delevryId], references: [id], onDelete: SetNull)
  dayId             Int
  day               Day                    @relation(fields: [dayId], references: [id], onDelete: Cascade)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  @@map("payments_products")
}

model PaymentProductDetail {
  id               Int            @id @default(autoincrement())
  productId        Int
  product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  paymentProductId Int
  paymentProduct   PaymentProduct @relation(fields: [paymentProductId], references: [id], onDelete: Cascade)
  quantity         Int            @default(1)
  totalePrice      Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Offer {
  id                   Int                  @id @default(autoincrement())
  name                 String
  products             Product[]
  price                Float
  isPublish            Boolean              @default(true)
  imageUri             String?
  PaymentsOffers       PaymentOffer[]
  paymentsOfferDetails PaymentOfferDetail[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt

  @@map("offers")
}

model PaymentOffer {
  id                Int                  @id @default(autoincrement())
  dailyNumber       Int                  @default(0)
  offers            Offer[]
  detailsOffer      PaymentOfferDetail[]
  isPayed           Boolean              @default(true)
  totalePrice       Float
  delevryPrice      Float?
  clientPhoneNumber String?
  delevryId         Int?
  delevry           User?                @relation(fields: [delevryId], references: [id], onDelete: SetNull)
  dayId             Int
  day               Day                  @relation(fields: [dayId], references: [id], onDelete: Cascade)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@map("payments_offers")
}

model PaymentOfferDetail {
  id             Int          @id @default(autoincrement())
  offerId        Int
  offer          Offer        @relation(fields: [offerId], references: [id], onDelete: Cascade)
  paymentOfferId Int
  paymentOffer   PaymentOffer @relation(fields: [paymentOfferId], references: [id], onDelete: Cascade)
  quantity       Int          @default(1)
  totalePrice    Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Day {
  id               Int              @id @default(autoincrement())
  startAt          DateTime         @default(now())
  stopAt           DateTime?
  paymentsProducts PaymentProduct[]
  paymentsOffers   PaymentOffer[]

  @@map("days")
}

// model CookingMethod {
//   id        Int       @id @default(autoincrement())
//   name      String    @unique
//   createdAt DateTime  @default(now())
//   updatedAT DateTime  @updatedAt
//   products  Product[]
// }

enum UserRole {
  admin
  livreur
}
